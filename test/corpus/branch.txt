===
If branch 1
===

if ($a -gt 2) {
    Write-Host "The value $a is greater than 2."
}

---

(program
  (statement_list
    (if_statement
      (pipeline
        (comparison_expression
          (variable)
          (comparison_operator)
          (integer_literal)))
      (statement_block
        (statement_list
          (pipeline
            (command
              (command_name)
              (command_elements
                (command_argument_sep)
                (array_literal_expression
                  (string_literal
                    (expandable_string_literal
                      (variable))))))))))))

===
If else
===

if ($a -gt 2) {
    Write-Host "The value $a is greater than 2."
}
else {
    Write-Host ("The value $a is less than or equal to 2," +
        " is not created or is not initialized.")
}

---

(program
  (statement_list
    (if_statement
      (pipeline
        (comparison_expression
          (variable)
          (comparison_operator)
          (integer_literal)))
      (statement_block
        (statement_list
          (pipeline
            (command
              (command_name)
              (command_elements
                (command_argument_sep)
                (array_literal_expression
                  (string_literal
                    (expandable_string_literal
                      (variable)))))))))
      (else_clause
        (statement_block
          (statement_list
            (pipeline
              (command
                (command_name)
                (command_elements
                  (command_argument_sep)
                  (array_literal_expression
                    (parenthesized_expression
                      (pipeline
                        (additive_expression
                          (string_literal
                            (expandable_string_literal
                              (variable)))
                          (string_literal
                            (expandable_string_literal)))))))))))))))

===
If elseif else
===

if ($a -gt 2) {
    Write-Host "The value $a is greater than 2."
}
elseif ($a -eq 2) {
    Write-Host "The value $a is equal to 2."
}
else {
    Write-Host ("The value $a is less than 2 or" +
        " was not created or initialized.")
}

---

(program
  (statement_list
    (if_statement
      (pipeline
        (comparison_expression
          (variable)
          (comparison_operator)
          (integer_literal)))
      (statement_block
        (statement_list
          (pipeline
            (command
              (command_name)
              (command_elements
                (command_argument_sep)
                (array_literal_expression
                  (string_literal
                    (expandable_string_literal
                      (variable)))))))))
      (elseif_clauses
        (elseif_clause
          (pipeline
            (comparison_expression
              (variable)
              (comparison_operator)
              (integer_literal)))
          (statement_block
            (statement_list
              (pipeline
                (command
                  (command_name)
                  (command_elements
                    (command_argument_sep)
                    (array_literal_expression
                      (string_literal
                        (expandable_string_literal
                          (variable)))))))))))
      (else_clause
        (statement_block
          (statement_list
            (pipeline
              (command
                (command_name)
                (command_elements
                  (command_argument_sep)
                  (array_literal_expression
                    (parenthesized_expression
                      (pipeline
                        (additive_expression
                          (string_literal
                            (expandable_string_literal
                              (variable)))
                          (string_literal
                            (expandable_string_literal)))))))))))))))

===
Switch Test 1
===

switch (3)
{
    1 {"It is one."}
    2 {"It is two."}
    3 {"It is three."}
    4 {"It is four."}
}

---

(program
  (statement_list
    (switch_statement
      (switch_condition
        (pipeline
          (integer_literal)))
      (switch_body
        (switch_clauses
          (switch_clause
            (switch_clause_condition
              (integer_literal))
            (statement_block
              (statement_list
                (pipeline
                  (string_literal
                    (expandable_string_literal))))))
          (switch_clause
            (switch_clause_condition
              (integer_literal))
            (statement_block
              (statement_list
                (pipeline
                  (string_literal
                    (expandable_string_literal))))))
          (switch_clause
            (switch_clause_condition
              (integer_literal))
            (statement_block
              (statement_list
                (pipeline
                  (string_literal
                    (expandable_string_literal))))))
          (switch_clause
            (switch_clause_condition
              (integer_literal))
            (statement_block
              (statement_list
                (pipeline
                  (string_literal
                    (expandable_string_literal)))))))))))

===
Switch Test 2
===

switch (4, 2)
{
    1 {"It is one."; Break}
    2 {"It is two." ; Break }
    3 {"It is three." ; Break }
    4 {"It is four." ; Break }
    3 {"Three again."}
}

---

(program
  (statement_list
    (switch_statement
      (switch_condition
        (pipeline
          (array_literal_expression
            (integer_literal)
            (integer_literal))))
      (switch_body
        (switch_clauses
          (switch_clause
            (switch_clause_condition
              (integer_literal))
            (statement_block
              statement_list: (statement_list
                (pipeline
                  (string_literal
                    (expandable_string_literal)))
                (empty_statement)
                (flow_control_statement))))
          (switch_clause
            (switch_clause_condition
              (integer_literal))
            (statement_block
              statement_list: (statement_list
                (pipeline
                  (string_literal
                    (expandable_string_literal)))
                (empty_statement)
                (flow_control_statement))))
          (switch_clause
            (switch_clause_condition
              (integer_literal))
            (statement_block
              statement_list: (statement_list
                (pipeline
                  (string_literal
                    (expandable_string_literal)))
                (empty_statement)
                (flow_control_statement))))
          (switch_clause
            (switch_clause_condition
              (integer_literal))
            (statement_block
              statement_list: (statement_list
                (pipeline
                  (string_literal
                    (expandable_string_literal)))
                (empty_statement)
                (flow_control_statement))))
          (switch_clause
            (switch_clause_condition
              (integer_literal))
            (statement_block
              statement_list: (statement_list
                (pipeline
                  (string_literal
                    (expandable_string_literal)))))))))))

===
Switch Test 3
===

switch ($fontstyle) {
	normal { $font = $fontnormal }
	italic { $font = $fontoblique }
	bold { $font = $fontbold }
	bolditalic { $font = $fontboldobl }
}
---

(program
  (statement_list
    (switch_statement
      (switch_condition
        (pipeline
          (variable)))
      (switch_body
        (switch_clauses
          (switch_clause
            (switch_clause_condition)
            (statement_block
              (statement_list
                (pipeline
                  (assignment_expression
                    (left_assignment_expression
                      (variable))
                    (assignement_operator)
                    (pipeline
                      (variable)))))))
          (switch_clause
            (switch_clause_condition)
            (statement_block
              (statement_list
                (pipeline
                  (assignment_expression
                    (left_assignment_expression
                      (variable))
                    (assignement_operator)
                    (pipeline
                      (variable)))))))
          (switch_clause
            (switch_clause_condition)
            (statement_block
              (statement_list
                (pipeline
                  (assignment_expression
                    (left_assignment_expression
                      (variable))
                    (assignement_operator)
                    (pipeline
                      (variable)))))))
          (switch_clause
            (switch_clause_condition)
            (statement_block
              (statement_list
                (pipeline
                  (assignment_expression
                    (left_assignment_expression
                      (variable))
                    (assignement_operator)
                    (pipeline
                      (variable))))))))))))

===
Switch Test 4
===

switch ($fontstyle) {
	normal { $font = $fontnormal };
	italic { $font = $fontoblique };
	bold { $font = $fontbold };
	bolditalic { $font = $fontboldobl };
}
---

(program
  (statement_list
    (switch_statement
      (switch_condition
        (pipeline
          (variable)))
      (switch_body
        (switch_clauses
          (switch_clause
            (switch_clause_condition)
            (statement_block
              (statement_list
                (pipeline
                  (assignment_expression
                    (left_assignment_expression
                      (variable))
                    (assignement_operator)
                    (pipeline
                      (variable)))))))
          (switch_clause
            (switch_clause_condition)
            (statement_block
              (statement_list
                (pipeline
                  (assignment_expression
                    (left_assignment_expression
                      (variable))
                    (assignement_operator)
                    (pipeline
                      (variable)))))))
          (switch_clause
            (switch_clause_condition)
            (statement_block
              (statement_list
                (pipeline
                  (assignment_expression
                    (left_assignment_expression
                      (variable))
                    (assignement_operator)
                    (pipeline
                      (variable)))))))
          (switch_clause
            (switch_clause_condition)
            (statement_block
              (statement_list
                (pipeline
                  (assignment_expression
                    (left_assignment_expression
                      (variable))
                    (assignement_operator)
                    (pipeline
                      (variable))))))))))))
