===
Variable : Direct assignment
===

$MyVariable = 1, 2, 3

$Path = "C:\Windows\System32"

---

(program
  (statement_list
    (pipeline
      (assignment_expression
        (left_assignment_expression
          (variable))
        (assignement_operator)
        (pipeline
          (array_literal_expression
            (integer_literal)
            (integer_literal)
            (integer_literal)))))
    (pipeline
      (assignment_expression
        (left_assignment_expression
          (variable))
        (assignement_operator)
        (pipeline
          (string_literal
            (expandable_string_literal)))))))

===
Variable : Command results
===

$Processes = Get-Process

$Today = (Get-Date).DateTime

---

(program
  (statement_list
    (pipeline
      (assignment_expression
        (left_assignment_expression
          (variable))
        (assignement_operator)
        (pipeline
          (command
            (command_name)))))
    (pipeline
      (assignment_expression
        (left_assignment_expression
          (variable))
        (assignement_operator)
        (pipeline
          (member_access
            (parenthesized_expression
              (pipeline
                (command
                  (command_name))))
            (member_name
              (simple_name))))))))

===
Variable : Multi assignment
===

$a = $b = $c = 0

---

(program
  (statement_list
    (pipeline
      (assignment_expression
        (left_assignment_expression
          (variable))
        (assignement_operator)
        (pipeline
          (assignment_expression
            (left_assignment_expression
              (variable))
            (assignement_operator)
            (pipeline
              (assignment_expression
                (left_assignment_expression
                  (variable))
                (assignement_operator)
                (pipeline
                  (integer_literal))))))))))

===
Variable : Multi variables, Multi assignment
===

$i,$j,$k = 10, "red", $true
$i,$j = 10, "red", $true

---

(program
  (statement_list
    (pipeline
      (assignment_expression
        (left_assignment_expression
          (array_literal_expression
            (variable)
            (variable)
            (variable)))
        (assignement_operator)
        (pipeline
          (array_literal_expression
            (integer_literal)
            (string_literal
              (expandable_string_literal))
            (variable)))))
    (pipeline
      (assignment_expression
        (left_assignment_expression
          (array_literal_expression
            (variable)
            (variable)))
        (assignement_operator)
        (pipeline
          (array_literal_expression
            (integer_literal)
            (string_literal
              (expandable_string_literal))
            (variable)))))))

===
Variable : Typed variables
===

[string]$words = "Hello"
$words = 2
$words += 10

---

(program
  (statement_list
    (pipeline
      (assignment_expression
        (left_assignment_expression
          (unary_expression
            (cast_expression
              (type_literal
                (type_spec
                  (type_name
                    (type_identifier))))
              (variable))))
        (assignement_operator)
        (pipeline
          (string_literal
            (expandable_string_literal)))))
    (pipeline
      (assignment_expression
        (left_assignment_expression
          (variable))
        (assignement_operator)
        (pipeline
          (integer_literal))))
    (pipeline
      (assignment_expression
        (left_assignment_expression
          (variable))
        (assignement_operator)
        (pipeline
          (integer_literal))))))

===
Variable : Simple variable
===

$aSimpleVariable001

$91

$__Z

$env:PROGRAM_LOCATION

---

(program
  (statement_list
    (pipeline
      (variable))
    (pipeline
      (variable))
    (pipeline
      (variable))
    (pipeline
      (variable))))

===
Variable : Special variables
===

$$

$^

$?

---

(program
  (statement_list
    (pipeline
      (variable))
    (pipeline
      (variable))
    (pipeline
      (variable))))

===
Variable : Brace variable
===

${Simple}

${More-interestin'}

${
    Really &&
    quite ^
    unusual???
}

---

(program
  (statement_list
    (pipeline
      (variable
        (braced_variable)))
    (pipeline
      (variable
        (braced_variable)))
    (pipeline
      (variable
        (braced_variable)))))
